# -*- coding: utf-8 -*-
"""6G_IoT_Beamforming_Dataset.csv.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RBP945WOo_GDufLLhMOjYVtrbJ7GjzS7
"""

#import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
import io
from sklearn.model_selection import train_test_split

#load csv file
df = pd.read_csv("6G_IoT_Beamforming_Dataset.csv")

df.head()

#Looking at the data, it is clear that the date can be segmented into:
#1 Network Parameters viz: Transmit power, Bandwidth,Frequency,codebook size.
#2 Environmental Factors viz: Obstacle density, Mobility, Interference level, Indoor/Outdoor classification.
#3 Device features: Number of Antennas, Device type
#4 Computer Vision: Extracted SIFT points for intelligent beam forming decisions
#5 Performance metrics: Beamforming Gain (dB) â€“ Measures signal strength improvement,Latency (ms) â€“ Transmission delay in milliseconds,
    #Energy Consumption (kWh/Gb) â€“ Power efficiency metric,Throughput (Mbps) â€“ Data transmission rate,Beam Training Time (s) â€“ Time taken for beam alignment'
    #SNR Improvement (dB) â€“ Signal-to-noise ratio enhancement,Processing Time (ms) â€“ Computational overhead,Memory Usage (MB) â€“ Resource consumption.
#6 Target variable: Optimized
# Potential Use Cases:
    #ðŸ”¹ Machine Learning & AI: Train models for predictive beamforming optimization.
    #ðŸ”¹ 6G & IoT Research: Analyze next-gen network efficiency improvements.
    #ðŸ”¹ Computer Vision in Wireless Networks: Investigate CVâ€™s role in optimizing signal transmission.
    #ðŸ”¹ Performance Benchmarking: Compare various beamforming strategies for 6G.

df.info()

df.describe().T

#univariate analysis
df.hist(figsize=(12, 10), bins=30,)
plt.tight_layout()
plt.show()

df.columns.tolist()

#Bivariate analysis
fig, ax = plt.subplots(figsize=(10,8))
ax.scatter(x=df['Number of Antennas'], y=df['Beamforming Gain (dB)'], color='purple')
ax.set_xlabel('Number of Antennas')
ax.set_ylabel('Beamforming Gain (dB)')
ax.set_title('Number of Antennas vs. Beamforming Gain (dB)')
st.pyplot(fig)

fig, ax = plt.subplots(figsize=(10,8))
ax.scatter(df['Number of Antennas'], df['Beamforming Gain (dB)'], color='purple')
ax.set_xlabel('Number of Antennas')
ax.set_ylabel('Beamforming Gain (dB)')
ax.set_title('Number of Antennas vs. Beamforming Gain (dB)')
st.pyplot(fig)

ig, ax = plt.subplots(figsize=(10,8))
corr = df.corr()
plt.figure(figsize=(14, 10))
sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=".2f", annot_kws={"size":8})
plt.xticks(rotation=45, ha='right')
plt.yticks(rotation=0)
plt.title("Correlation Heatmap", fontsize=16)
st.pyplot(fig)

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.ensemble import RandomForestRegressor

#convert bools to int
bool_cols = ["Environment_Outdoor", "Device Type_IoT Sensor", "Device Type_Smartphone"]
df[bool_cols] = df[bool_cols].astype(int)

x = df.drop("Optimized", axis =1)
y = df["Optimized"]

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.2, random_state = 42, stratify = y)

#Train Random forest model
model = RandomForestRegressor(n_estimators = 100, random_state = 42)
model.fit(x_train, y_train)

#Predict
y_pred = model.predict(x_test)

#Evaluate
print("Mean squared error:", mean_squared_error(y_test, y_pred))
print("R2 score Value:", r2_score(y_test, y_pred))

#Visualize
plt.scatter(y_test, y_pred, alpha=0.5)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.xlabel("Actual value")
plt.ylabel("Predicted value")
plt.title("Actual vs Predicted value")
plt.show()

results_df = pd.DataFrame({
    "Actual Value": y_test.values,
    "Predicted": y_pred
})
print("Actual vs Predicted Values")
results_df.head(20)

#from IPython.display import FileLink
#results_df.to_csv("results.csv", index=False)
#FileLink("results.csv")
csv = results_df.to_csv(index=False).encode("utf-8")

st.download_button(
    label="ðŸ“¥ Download Prediction Results as CSV",
    data=csv,
    file_name="beamforming_results.csv",
    mime="text/csv",
)
st.sidebar.header("About")
st.sidebar.info("This application estimates if beamforming is optimized or not in a 6G signal")

input_data = {}

input_data = {}
for col in x.columns:
    if df[col].dtype in [np.int64, np.float64]:
        input_data[col] = st.number_input(f"{col}", value=float(df[col].mean()))
    else:
        input_data[col] = st.text_input(f"{col}")
input_df = pd.DataFrame([input_data])
